-- Create CoursePlans table if not exists (NO ModuleId column)
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CoursePlans]') AND type in (N'U'))
BEGIN
    CREATE TABLE {databaseOwner}[{objectQualifier}CoursePlans]
    (
        [ID] INT NOT NULL IDENTITY (1, 1)
        CONSTRAINT [PK_CoursePlans] PRIMARY KEY CLUSTERED,
        [Name] NVARCHAR(100) NOT NULL,
        [DurationHours] INT NOT NULL,
        [Description] NVARCHAR(MAX) NULL,
        [MaxCapacity] INT NOT NULL,
        [Price] DECIMAL(10,2) NOT NULL,
        [IsPublic] BIT NOT NULL DEFAULT 1,
        [PrerequisiteIds] NVARCHAR(100) NULL,
        [CourseCategory] NVARCHAR(50) NOT NULL
        -- No ModuleId column here
    ) ON [PRIMARY]
END
GO

IF NOT EXISTS (SELECT TOP 1 * FROM {databaseOwner}[{objectQualifier}CoursePlans])
BEGIN
    INSERT INTO {databaseOwner}[{objectQualifier}CoursePlans]
    (Name, DurationHours, Description, MaxCapacity, Price, IsPublic, CourseCategory) -- No ModuleId here
    VALUES
    ('Basic Beer Brewing', 2, 'Bevezetés a sörfőzés alapjaiba, eszközök, alapanyagok és alaptechnikák bemutatásával.', 10, 29.99, 1, 'Brewing'),
    ('Advanced Brewing Techniques', 3, 'Gyakorlott házi sörfőzőknek szóló képzés, vízkémia és élesztőkezelés mélyebb ismeretével.', 8, 49.99, 1, 'Brewing'),
    ('Cocktail Mastery Course', 2, 'Átfogó bevezetés a koktélkészítés művészetébe, klasszikus és modern receptekkel.', 12, 34.99, 1, 'Cocktail'),
    ('Gin & Tonic Special', 1, 'Egyedi workshop a tökéletes gin-tonik párosításokról és variációkról.', 15, 19.99, 1, 'Cocktail'),
    ('Homemade Liqueur Preparation', 4, 'Részletes útmutató a házi likőrök előállításáról különféle alapanyagokból.', 6, 59.99, 1, 'Liqueur')
END
GO

-- Create CourseSchedules table (Keep ModuleId here)
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CourseSchedules]') AND type in (N'U'))
BEGIN
    CREATE TABLE {databaseOwner}[{objectQualifier}CourseSchedules]
    (
        [ID] INT NOT NULL IDENTITY (1, 1)
        CONSTRAINT [PK_CourseSchedules] PRIMARY KEY CLUSTERED,
        [CoursePlanID] INT NOT NULL
        CONSTRAINT [FK_CourseSchedules_CoursePlans] FOREIGN KEY
        REFERENCES {databaseOwner}[{objectQualifier}CoursePlans] (ID) ON DELETE CASCADE,
        [StartTime] DATETIME NOT NULL, -- Store as UTC
        [CreatedByUserID] INT NOT NULL,
        [CreatedDate] DATETIME NOT NULL DEFAULT GETUTCDATE(),
        [AvailableSeats] INT NOT NULL,
        [IsActive] BIT NOT NULL DEFAULT 1,
        [ModuleId] INT NOT NULL
    ) ON [PRIMARY]
END
GO

-- Add ModuleId Index if not implicitly handled by Scope (Keep Index for Schedules)
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE name='IX_CourseSchedules_ModuleId' AND object_id = OBJECT_ID('{databaseOwner}[{objectQualifier}CourseSchedules]'))
BEGIN
   CREATE INDEX [IX_CourseSchedules_ModuleId] ON {databaseOwner}[{objectQualifier}CourseSchedules] ([ModuleId])
END
GO

CREATE INDEX [IX_CourseSchedules_StartTime] ON {databaseOwner}[{objectQualifier}CourseSchedules] (StartTime)
GO

-- Create CourseBookings table (Keep ModuleId here)
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CourseBookings]') AND type in (N'U'))
BEGIN
    CREATE TABLE {databaseOwner}[{objectQualifier}CourseBookings]
    (
        [ID] INT NOT NULL IDENTITY (1, 1)
        CONSTRAINT [PK_CourseBookings] PRIMARY KEY CLUSTERED,
        [CourseScheduleID] INT NOT NULL
        CONSTRAINT [FK_CourseBookings_CourseSchedules] FOREIGN KEY
        REFERENCES {databaseOwner}[{objectQualifier}CourseSchedules] (ID) ON DELETE CASCADE,
        [UserID] INT NOT NULL,
        [BookingTime] DATETIME NOT NULL DEFAULT GETUTCDATE(), -- Store as UTC
        [IsCancelled] BIT NOT NULL DEFAULT 0,
        [VoucherCode] NVARCHAR(50) NULL,
        [PaymentStatus] NVARCHAR(50) NOT NULL DEFAULT 'Pending',
        [PaymentReference] NVARCHAR(100) NULL,
        [Notes] NVARCHAR(500) NULL,
        [ModuleId] INT NOT NULL -- Explicit ModuleId for reliable scoping
    ) ON [PRIMARY]
END
GO

-- Add ModuleId Index if not implicitly handled by Scope (Keep Index for Bookings)
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE name='IX_CourseBookings_ModuleId' AND object_id = OBJECT_ID('{databaseOwner}[{objectQualifier}CourseBookings]'))
BEGIN
   CREATE INDEX [IX_CourseBookings_ModuleId] ON {databaseOwner}[{objectQualifier}CourseBookings] ([ModuleId])
END
GO

CREATE INDEX [IX_CourseBookings_UserID] ON {databaseOwner}[{objectQualifier}CourseBookings] (UserID)
GO

CREATE INDEX [IX_CourseBookings_CourseScheduleID] ON {databaseOwner}[{objectQualifier}CourseBookings] (CourseScheduleID)
GO

-- Insert sample course schedules (Keep inserting with ModuleId)
IF NOT EXISTS (SELECT TOP 1 * FROM {databaseOwner}[{objectQualifier}CourseSchedules])
BEGIN
    -- NOTE: This @moduleId variable needs to be determined correctly during install.
    -- The best way is usually via code during module upgrade/install features.
    -- Hardcoding to 1 here is ONLY for basic sample data creation if run manually.
    -- DNN's script execution *might* substitute a real context ModuleId if configured,
    -- but relying on that can be risky.
    DECLARE @moduleId INT = 1;
    -- A check like this might work if run within certain DNN contexts, but not guaranteed
    -- IF EXISTS(SELECT TOP 1 ModuleId FROM DnnSharp.Common.Utilities.ModuleContext)
    --    SET @moduleId = (SELECT TOP 1 ModuleId FROM DnnSharp.Common.Utilities.ModuleContext);

    INSERT INTO {databaseOwner}[{objectQualifier}CourseSchedules]
    (CoursePlanID, StartTime, CreatedByUserID, CreatedDate, AvailableSeats, IsActive, ModuleId)
    VALUES
    -- Dates relative to execution time, storing as UTC
    (1, DATEADD(DAY, 7, GETUTCDATE()), 1, GETUTCDATE(), 10, 1, @moduleId),
    (2, DATEADD(DAY, 8, GETUTCDATE()), 1, GETUTCDATE(), 8, 1, @moduleId),
    (3, DATEADD(DAY, 9, GETUTCDATE()), 1, GETUTCDATE(), 12, 1, @moduleId),
    (4, DATEADD(DAY, 14, GETUTCDATE()), 1, GETUTCDATE(), 15, 1, @moduleId),
    (5, DATEADD(DAY, 21, GETUTCDATE()), 1, GETUTCDATE(), 6, 1, @moduleId)
END
GO