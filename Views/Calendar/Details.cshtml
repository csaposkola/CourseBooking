@using System.Linq
@using System.Web.Mvc
@using System.Web.Mvc.Html
@using DotNetNuke.Web.Client.ClientResourceManagement
@using DotNetNuke.Framework.JavaScriptLibraries
@using CourseBooking.Models
@inherits DotNetNuke.Web.Mvc.Framework.DnnWebViewPage<CourseScheduleEntity>

@{
DotNetNuke.Framework.JavaScriptLibraries.JavaScript.RequestRegistration(CommonJs.jQuery);
DotNetNuke.Framework.JavaScriptLibraries.JavaScript.RequestRegistration(CommonJs.jQueryUI);
DotNetNuke.Framework.ServicesFramework.Instance.RequestAjaxAntiForgerySupport();

var localStartTime = Model.StartTime.ToLocalTime();
var localEndTime = Model.EndTime.ToLocalTime();
var isRegistered = ViewBag.IsRegistered as bool? ?? false;
var userBooking = ViewBag.UserBooking as BookingEntity;
var canRegister = ViewBag.CanRegister as bool? ?? false;
var isAjax = Request.QueryString["isAjax"] == "true" || Request.IsAjaxRequest();

if (isAjax)
{
Layout = null;
}
}

<div class="course-booking-detail">
    <h2>Tanfolyam részletek</h2>

<div class="booking-details-container booking-details-stacked">
        <div class="booking-section full-width">
            <h3>Tanfolyam információk</h3>

            <div class="form-group">
                <label class="control-label col-md-4">Tanfolyam neve</label>
                <div class="col-md-8">
                    <p class="form-control-static">@Model.CoursePlan.Name</p>
                </div>
            </div>

            <div class="form-group">
                <label class="control-label col-md-4">Kategória</label>
                <div class="col-md-8">
                    <p class="form-control-static">@Model.CoursePlan.CourseCategory</p>
                </div>
            </div>

            <div class="form-group">
                <label class="control-label col-md-4">Dátum</label>
                <div class="col-md-8">
                    <p class="form-control-static">@localStartTime.ToString("yyyy. MMMM d.")</p>
                </div>
            </div>

            <div class="form-group">
                <label class="control-label col-md-4">Időpont</label>
                <div class="col-md-8">
                    <p class="form-control-static">@localStartTime.ToString("HH:mm") - @localEndTime.ToString("HH:mm")</p>
                </div>
            </div>

            <div class="form-group">
                <label class="control-label col-md-4">Időtartam</label>
                <div class="col-md-8">
                    <p class="form-control-static">@Model.CoursePlan.DurationHours óra</p>
                </div>
            </div>

            <div class="form-group">
                <label class="control-label col-md-4">Ár</label>
                <div class="col-md-8">
                    <p class="form-control-static">@Model.CoursePlan.Price.ToString("N0") Ft</p>
                </div>
            </div>

            <div class="form-group">
                <label class="control-label col-md-4">Szabad helyek</label>
                <div class="col-md-8">
                    <p class="form-control-static">@Model.RemainingSeats / @Model.AvailableSeats</p>
                </div>
            </div>

            <div class="form-group">
                <label class="control-label col-md-4">Leírás</label>
                <div class="col-md-8">
                    <p class="form-control-static">@Model.CoursePlan.Description</p>
                </div>
            </div>

            @if (!string.IsNullOrEmpty(Model.CoursePlan.PrerequisiteIds))
            {
                <div class="form-group">
                    <label class="control-label col-md-4">Előfeltételek</label>
                    <div class="col-md-8">
                        <p class="form-control-static">@Model.CoursePlan.PrerequisiteIds</p>
                    </div>
                </div>
            }
        </div>

        @if (isRegistered && userBooking != null)
        {
            <div class="booking-section full-width">
                <h3>Az Ön foglalása</h3>

                <div class="form-group">
                    <label class="control-label col-md-4">Foglalás azonosító</label>
                    <div class="col-md-8">
                        <p class="form-control-static">@userBooking.ID</p>
                    </div>
                </div>

                <div class="form-group">
                    <label class="control-label col-md-4">Foglalás ideje</label>
                    <div class="col-md-8">
                        <p class="form-control-static">@userBooking.BookingTime.ToLocalTime().ToString("yyyy. MM. dd. HH:mm")</p>
                    </div>
                </div>

                <div class="form-group">
                    <label class="control-label col-md-4">Állapot</label>
                    <div class="col-md-8">
                        <p class="form-control-static">
                            @(userBooking.IsCancelled ? "Lemondva" : "Aktív")
                        </p>
                    </div>
                </div>

                @if (!string.IsNullOrEmpty(userBooking.VoucherCode))
                {
                    <div class="form-group">
                        <label class="control-label col-md-4">Kupon kód</label>
                        <div class="col-md-8">
                            <div class="voucher-container">
                                <span id="voucherCode">@userBooking.VoucherCode</span>
                                <button type="button" id="copyVoucher" class="btn btn-sm btn-default">
                                    <i class="fa fa-copy"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                }

                <div class="form-group">
                    <label class="control-label col-md-4">Fizetési állapot</label>
                    <div class="col-md-8">
                        <p class="form-control-static">@userBooking.PaymentStatus</p>
                    </div>
                </div>
            </div>
        }
        else if (Request.IsAuthenticated && canRegister)
        {
            <div class="registration-section full-width">
                <h3>Foglalás</h3>

                <form id="bookingForm" action="@Url.Action("Register", "Calendar")" method="post" class="form-horizontal" role="form">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="id" value="@Model.ID" />

                    <div class="form-group">
                        <label class="control-label col-md-4">Megjegyzés (opcionális)</label>
                        <div class="col-md-8">
                            <textarea name="notes" class="form-control" rows="3"></textarea>
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-md-offset-4 col-md-8">
                            <button type="submit" id="submitBooking" class="btn btn-primary">Foglalás véglegesítése</button>
                        </div>
                    </div>
                </form>
            </div>
        }
        else if (!Request.IsAuthenticated)
        {
            <div class="registration-message full-width">
                <div class="alert alert-info">
                    <strong>Figyelem!</strong> A foglaláshoz be kell jelentkeznie.
                </div>
            </div>
        }
        else if (Model.RemainingSeats <= 0)
        {
            <div class="registration-message full-width">
                <div class="alert alert-warning">
                    <strong>Sajnáljuk!</strong> Ez a tanfolyam már betelt.
                </div>
            </div>
        }
        else if (isRegistered)
        {
            <div class="registration-message full-width">
                <div class="alert alert-info">
                    <strong>Információ:</strong> Ön már regisztrált erre a tanfolyamra.
                </div>
            </div>
        }
    </div>

    <div class="booking-actions">
        @if (isRegistered && userBooking != null && !userBooking.IsCancelled && Model.StartTime > DateTime.UtcNow.AddHours(24))
        {
        <form action="@Url.Action("Cancel", "Calendar", new { id = userBooking.ID })" method="post" class="cancel-form" data-ajax="true" data-success-callback="onCancelSuccess" onsubmit="return confirm('Biztosan lemondja a foglalást?');">
            @Html.AntiForgeryToken()
            <button type="submit" class="btn btn-danger">Foglalás lemondása</button>
        </form>
        }

        <button type="button" class="btn btn-default modal-close">Bezárás</button>
    </div>
</div>

@{
ClientResourceManager.RegisterStyleSheet(Dnn.DnnPage, "~/DesktopModules/MVC/CourseBooking/module.css");
}
<script type="text/javascript">
    $(document).ready(function () {
        // Copy voucher code
        $("#copyVoucher").click(function () {
            var voucherText = $("#voucherCode").text();

            // Create temporary element
            var tempInput = $("<input>");
            $("body").append(tempInput);
            tempInput.val(voucherText).select();

            // Execute copy command
            document.execCommand("copy");
            tempInput.remove();

            // Show success message
            var $btn = $(this);
            var originalHtml = $btn.html();
            $btn.html('<i class="fa fa-check"></i>');

            setTimeout(function () {
                $btn.html(originalHtml);
            }, 1500);
        });

        // Close modal button - Fixed implementation
        $(".modal-close").click(function() {
            console.log("Close button clicked");
            
            // First try parent window dialog
            if (window.parent && window.parent.jQuery && window.parent.jQuery('#courseBookingModal').hasClass('ui-dialog-content')) {
                console.log("Closing parent dialog");
                window.parent.jQuery('#courseBookingModal').dialog('close');
            } 
            // Then try current window dialog
            else if (jQuery('#courseBookingModal').hasClass('ui-dialog-content')) {
                console.log("Closing current dialog");
                jQuery('#courseBookingModal').dialog('close');
            } 
            // Try direct parent access as fallback
            else if (window.parent && typeof window.parent.closeModal === 'function') {
                console.log("Calling parent closeModal function");
                window.parent.closeModal();
            }
            // Last resort - if we can't close programmatically, at least give visual feedback
            else {
                console.log("No dialog found to close");
                alert("Az ablak bezárásához kattintson az X gombra a jobb felső sarokban.");
            }
        });
        
        // Handle booking form submission manually to ensure it works
        $("#bookingForm").on("submit", function(e) {
            e.preventDefault();
            
            console.log("Booking form submitted");
            var formData = $(this).serialize();
            var formAction = $(this).attr('action');
            
            // Show loading state
            $("#submitBooking").prop('disabled', true).html('<i class="fa fa-spinner fa-spin"></i> Feldolgozás...');
            
            // Submit form via AJAX
            $.ajax({
                url: formAction,
                type: 'POST',
                data: formData,
                success: function(response) {
                    console.log("Booking successful", response);
                    // Handle successful booking
                    handleBookingSuccess(response);
                },
                error: function(xhr, status, error) {
                    console.error("Booking error", xhr, status, error);
                    // Reset button
                    $("#submitBooking").prop('disabled', false).text('Foglalás véglegesítése');
                    // Show error message
                    alert("Hiba történt a foglalás során: " + (xhr.responseText || error));
                }
            });
        });
    });
    
    // Function to handle successful booking
    function handleBookingSuccess(response) {
        console.log("Handling booking success", response);
        
        // Navigate to confirmation page
        var confirmationUrl = '@Url.Action("Confirmation", "Calendar")';
        var bookingId = response.ID || '';
        
        // If in AJAX/modal context and parent has CourseBookingAjax
        if (window.parent && window.parent.CourseBookingAjax) {
            console.log("Opening confirmation in parent modal");
            window.parent.CourseBookingAjax.openModalUrl(
                confirmationUrl + '?id=' + bookingId + '&isAjax=true', 
                'Foglalás visszaigazolása', 
                { width: 800, height: 600 }
            );
        } 
        // If in current window context and has CourseBookingAjax
        else if (window.CourseBookingAjax) {
            console.log("Opening confirmation in current modal");
            CourseBookingAjax.openModalUrl(
                confirmationUrl + '?id=' + bookingId + '&isAjax=true', 
                'Foglalás visszaigazolása', 
                { width: 800, height: 600 }
            );
        } 
        // Fallback to direct navigation
        else {
            console.log("Redirecting to confirmation page");
            window.location.href = confirmationUrl + '?id=' + bookingId;
        }
    }

    // Cancel success callback
    function onCancelSuccess(response) {
        // Alert the user and close the modal
        alert('A foglalást sikeresen lemondta.');
        if (window.parent && window.parent.$('#courseBookingModal').length) {
            window.parent.$('#courseBookingModal').dialog('close');
            // Refresh calendar data
            if (window.parent.courseCalendar) {
                window.parent.courseCalendar.loadCalendarData();
            }
        }
    }
</script>