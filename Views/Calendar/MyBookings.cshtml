@using System.Linq
@using System.Web.Mvc
@using System.Web.Mvc.Html
@using DotNetNuke.Web.Client.ClientResourceManagement
@using DotNetNuke.Framework.JavaScriptLibraries
@using CourseBooking.Models
@inherits DotNetNuke.Web.Mvc.Framework.DnnWebViewPage<IEnumerable<BookingEntity>>

@{
    DotNetNuke.Framework.JavaScriptLibraries.JavaScript.RequestRegistration(CommonJs.jQuery);
    DotNetNuke.Framework.JavaScriptLibraries.JavaScript.RequestRegistration(CommonJs.jQueryUI);
    DotNetNuke.Framework.ServicesFramework.Instance.RequestAjaxAntiForgerySupport();

    var hasUpcomingBookings = Model.Any(b => !b.IsCancelled && b.CourseSchedule.StartTime > DateTime.UtcNow);
    var hasPastBookings = Model.Any(b => b.CourseSchedule.StartTime <= DateTime.UtcNow);
    
    var isAjax = Request.QueryString["isAjax"] == "true" || Request.IsAjaxRequest() || ViewBag.IsAjaxRequest == true;
    
    // If this is a popup, we don't need the wrapper layout
    if (isAjax)
    {
        Layout = null;
    }
}

<div class="user-bookings">
    <h2>Az Ön foglalásai</h2>

    @if (!Model.Any())
    {
        <div class="alert alert-info">
            <p>Önnek még nincs foglalása. <a href="@Url.Action("Index")" class="return-to-calendar">Nézze meg a tanfolyam naptárat</a> új foglalás létrehozásához.</p>
        </div>
    }
    else
    {
        if (hasUpcomingBookings)
        {
            <h3>Közelgő foglalások</h3>
            <div class="bookings-table-container">
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>Tanfolyam</th>
                            <th>Dátum</th>
                            <th>Időpont</th>
                            <th>Foglalás ideje</th>
                            <th>Kupon kód</th>
                            <th>Státusz</th>
                            <th>Műveletek</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var booking in Model.Where(b => !b.IsCancelled && b.CourseSchedule.StartTime > DateTime.UtcNow)
                            .OrderBy(b => b.CourseSchedule.StartTime))
                        {
                            var localStartTime = booking.CourseSchedule.StartTime.ToLocalTime();
                            var localEndTime = booking.CourseSchedule.EndTime.ToLocalTime();

                            <tr>
                                <td>@booking.CourseSchedule.CoursePlan.Name</td>
                                <td>@localStartTime.ToString("yyyy. MMMM d.")</td>
                                <td>@localStartTime.ToString("HH:mm") - @localEndTime.ToString("HH:mm")</td>
                                <td>@booking.BookingTime.ToLocalTime().ToString("yyyy-MM-dd HH:mm")</td>
                                <td>
                                    @if (!string.IsNullOrEmpty(booking.VoucherCode))
                                    {
                                        <span class="voucher-code">@booking.VoucherCode</span>
                                    }
                                    else
                                    {
                                        <span>-</span>
                                    }
                                </td>
                                <td>
                                    @if (booking.IsCancelled)
                                    {
                                        <span class="badge badge-secondary">Lemondva</span>
                                    }
                                    else
                                    {
                                        <span class="badge badge-success">Aktív</span>
                                    }
                                </td>
                                <td>
                                    <div class="btn-group">
                                        <a href="@Url.Action("Details", new { id = booking.CourseScheduleID })" class="btn btn-sm btn-default open-modal" 
                                           data-modal="true" data-modal-title="@booking.CourseSchedule.CoursePlan.Name részletei">
                                            <i class="fa fa-search"></i> Részletek
                                        </a>

                                        @if (!booking.IsCancelled && booking.CourseSchedule.StartTime > DateTime.UtcNow.AddHours(24))
                                        {
                                            <form action="@Url.Action("Cancel", "Calendar", new { id = booking.ID })" method="post" 
                                                  class="d-inline cancel-form" data-ajax="true" data-success-callback="onCancelSuccess" 
                                                  onsubmit="return confirm('Biztosan lemondja a foglalást?');">
                                                @Html.AntiForgeryToken()
                                                <button type="submit" class="btn btn-sm btn-danger">
                                                    <i class="fa fa-times"></i> Lemondás
                                                </button>
                                            </form>
                                        }
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }

        if (hasPastBookings)
        {
            <h3>Korábbi foglalások</h3>
            <div class="bookings-table-container">
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>Tanfolyam</th>
                            <th>Dátum</th>
                            <th>Időpont</th>
                            <th>Foglalás ideje</th>
                            <th>Kupon kód</th>
                            <th>Státusz</th>
                            <th>Műveletek</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var booking in Model.Where(b => b.IsCancelled || b.CourseSchedule.StartTime <= DateTime.UtcNow)
                            .OrderByDescending(b => b.CourseSchedule.StartTime))
                        {
                            var localStartTime = booking.CourseSchedule.StartTime.ToLocalTime();
                            var localEndTime = booking.CourseSchedule.EndTime.ToLocalTime();

                            <tr class="@(booking.IsCancelled ? "cancelled-row" : "")">
                                <td>@booking.CourseSchedule.CoursePlan.Name</td>
                                <td>@localStartTime.ToString("yyyy. MMMM d.")</td>
                                <td>@localStartTime.ToString("HH:mm") - @localEndTime.ToString("HH:mm")</td>
                                <td>@booking.BookingTime.ToLocalTime().ToString("yyyy-MM-dd HH:mm")</td>
                                <td>
                                    @if (!string.IsNullOrEmpty(booking.VoucherCode))
                                    {
                                        <span class="voucher-code">@booking.VoucherCode</span>
                                    }
                                    else
                                    {
                                        <span>-</span>
                                    }
                                </td>
                                <td>
                                    @if (booking.IsCancelled)
                                    {
                                        <span class="badge badge-secondary">Lemondva</span>
                                    }
                                    else if (booking.CourseSchedule.StartTime <= DateTime.UtcNow)
                                    {
                                        <span class="badge badge-info">Lezajlott</span>
                                    }
                                </td>
                                <td>
                                    <a href="@Url.Action("Details", new { id = booking.CourseScheduleID })" 
                                       class="btn btn-sm btn-default open-modal" data-modal="true" 
                                       data-modal-title="@booking.CourseSchedule.CoursePlan.Name részletei">
                                        <i class="fa fa-search"></i> Részletek
                                    </a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
    }

    <div class="booking-actions">
        <button type="button" class="btn btn-default return-to-calendar">
            <i class="fa fa-calendar"></i> Vissza a naptárhoz
        </button>
        
        @if (isAjax)
        {
            <button type="button" class="btn btn-default modal-close">Bezárás</button>
        }
    </div>
</div>

@{
    ClientResourceManager.RegisterStyleSheet(Dnn.DnnPage, "~/DesktopModules/MVC/CourseBooking/module.css");
}

<script type="text/javascript">
    $(document).ready(function() {
        // Initialize modal handling for links inside this view
        $(".open-modal").on("click", function(e) {
            e.preventDefault();
            var url = $(this).attr("href");
            var title = $(this).data("modal-title") || "Részletek";
            
            // Check if we're in a modal already
            if (window.parent && window.parent.CourseBookingAjax) {
                window.parent.CourseBookingAjax.openModalUrl(url, title);
            } else if (window.CourseBookingAjax) {
                CourseBookingAjax.openModalUrl(url, title);
            } else {
                window.location.href = url; // Fallback to direct navigation
            }
        });
        
        // Handle return to calendar
        $(".return-to-calendar").on("click", function(e) {
            e.preventDefault();
            
            // If in modal, close it
            if (window.parent && window.parent.$('#courseBookingModal').dialog('instance')) {
                window.parent.$('#courseBookingModal').dialog('close');
            } else {
                window.location.href = '@Url.Action("Index")';
            }
        });
        
        // Modal close button
        $(".modal-close").on("click", function() {
            if (window.parent && window.parent.$('#courseBookingModal').dialog('instance')) {
                window.parent.$('#courseBookingModal').dialog('close');
            } else if ($('#courseBookingModal').dialog('instance')) {
                $('#courseBookingModal').dialog('close');
            }
        });
    });
    
    // Cancel success callback function
    function onCancelSuccess(response) {
        alert('A foglalást sikeresen lemondta.');
        
        // Refresh the current page to show updated booking status
        window.location.reload();
        
        // If in parent window, refresh calendar data
        if (window.parent && window.parent.courseCalendar) {
            window.parent.courseCalendar.loadCalendarData();
        }
    }
</script>