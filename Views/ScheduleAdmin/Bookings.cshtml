@using DotNetNuke.Web.Client.ClientResourceManagement
@using DotNetNuke.Framework.JavaScriptLibraries
@using System.Linq
@using CourseBooking.Models
@inherits DotNetNuke.Web.Mvc.Framework.DnnWebViewPage<IEnumerable<BookingEntity>>

@{
    DotNetNuke.Framework.JavaScriptLibraries.JavaScript.RequestRegistration(CommonJs.jQuery);
    DotNetNuke.Framework.JavaScriptLibraries.JavaScript.RequestRegistration(CommonJs.jQueryUI);
    DotNetNuke.Framework.ServicesFramework.Instance.RequestAjaxAntiForgerySupport();

    var schedule = ViewBag.Schedule as CourseScheduleEntity;
    var localStartTime = schedule.StartTime.ToLocalTime();
    var sf = DotNetNuke.Framework.ServicesFramework.Instance;
}

<div class="admin-course-bookings">
    <h2>Foglalások</h2>

    <div class="course-info-panel">
        <h3>@schedule.CoursePlan.Name</h3>
        <div class="row">
            <div class="col-md-6">
                <p><strong>Dátum:</strong> @localStartTime.ToString("yyyy. MMMM d.")</p>
                <p><strong>Időpont:</strong> @localStartTime.ToString("HH:mm") - @schedule.EndTime.ToLocalTime().ToString("HH:mm")</p>
                <p><strong>Időtartam:</strong> @schedule.CoursePlan.DurationHours óra</p>
            </div>
            <div class="col-md-6">
                <p><strong>Kategória:</strong> @schedule.CoursePlan.CourseCategory</p>
                <p><strong>Foglalások:</strong> @schedule.BookingCount / @schedule.AvailableSeats</p>
                <p>
                    <strong>Státusz:</strong>
                    @if (!schedule.IsActive)
                    {
                        <span class="badge badge-secondary">Inaktív</span>
                    }
                    else if (schedule.StartTime < DateTime.UtcNow)
                    {
                        <span class="badge badge-secondary">Elmúlt</span>
                    }
                    else if (schedule.BookingCount >= schedule.AvailableSeats)
                    {
                        <span class="badge badge-warning">Betelt</span>
                    }
                    else
                    {
                        <span class="badge badge-success">Aktív</span>
                    }
                </p>
            </div>
        </div>
    </div>

    <div class="bookings-actions-bar">
        @if (schedule.StartTime > DateTime.UtcNow && schedule.BookingCount > 0)
        {
            <button id="sendReminders" class="btn btn-info">
                <i class="fa fa-envelope"></i> Emlékeztetők küldése
            </button>
        }
    </div>

    <div class="bookings-table-container">
        <table class="table table-striped table-hover">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Felhasználó</th>
                    <th>E-mail</th>
                    <th>Foglalás ideje</th>
                    <th>Státusz</th>
                    <th>Fizetési állapot</th>
                    <th>Műveletek</th>
                </tr>
            </thead>
            <tbody>
                @if (Model != null && Model.Any())
                {
                    foreach (var booking in Model.OrderByDescending(b => b.BookingTime))
                    {
                        <tr class="@(booking.IsCancelled ? "cancelled-row" : "")">
                            <td>@booking.ID</td>
                            <td>@booking.UserDisplayName</td>
                            <td>@booking.UserEmail</td>
                            <td>@booking.BookingTime.ToLocalTime().ToString("yyyy-MM-dd HH:mm")</td>
                            <td>
                                @if (booking.IsCancelled)
                                {
                                    <span class="badge badge-secondary">Lemondva</span>
                                }
                                else
                                {
                                    <span class="badge badge-success">Aktív</span>
                                }
                            </td>
                            <td>@booking.PaymentStatus</td>
                            <td class="actions-cell">
                                <div class="btn-group">
                                    @if (!booking.IsCancelled && schedule.StartTime > DateTime.UtcNow)
                                    {
                                        <button type="button" class="btn btn-sm btn-warning cancel-booking" data-booking-id="@booking.ID">
                                            <i class="fa fa-ban"></i> Lemondás
                                        </button>
                                    }
                                    <button type="button" class="btn btn-sm btn-info send-reminder" data-booking-id="@booking.ID">
                                        <i class="fa fa-envelope"></i> Emlékeztető
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="7" class="text-center">Nincsenek foglalások ehhez az időponthoz</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <div class="bookings-nav-bar">
        <a href="@Url.Action("Index")" class="btn btn-default">
            <i class="fa fa-arrow-left"></i> Vissza az időpontokhoz
        </a>
    </div>
</div>

@{
    ClientResourceManager.RegisterStyleSheet(Dnn.DnnPage, "~/DesktopModules/MVC/CourseBooking/module.css");
}

<style>
    .cancelled-row {
        background-color: #f8f9fa;
        color: #6c757d;
        text-decoration: line-through;
    }

    .actions-cell {
        white-space: nowrap;
    }

    .bookings-actions-bar,
    .course-info-panel {
        margin-bottom: 20px;
    }

    .course-info-panel {
        background-color: #f8f9fa;
        border: 1px solid #e9ecef;
        border-radius: 5px;
        padding: 15px;
    }

    .bookings-nav-bar {
        margin-top: 20px;
    }
</style>

<script type="text/javascript">
    $(document).ready(function() {
        var sf = $.ServicesFramework(@Dnn.ModuleContext.ModuleId);
        var apiUrl = sf.getServiceRoot('CourseBooking') + 'CourseApi/';

        // Cancel booking
        $('.cancel-booking').click(function() {
            if (!confirm('Biztosan lemondja ezt a foglalást?')) {
                return;
            }

            var bookingId = $(this).data('booking-id');

            $.ajax({
                url: apiUrl + 'CancelBooking',
                type: 'POST',
                data: { bookingId: bookingId },
                beforeSend: function(xhr) {
                    xhr.setRequestHeader("ModuleId", @Dnn.ModuleContext.ModuleId);
                    xhr.setRequestHeader("TabId", @Dnn.Tab.TabID);
                    xhr.setRequestHeader('RequestVerificationToken', sf.getAntiForgeryValue());
                },
                success: function(result) {
                    // Reload the page to show updated status
                    window.location.reload();
                },
                error: function(xhr, status, error) {
                    alert('Hiba történt a lemondás során: ' + xhr.responseText);
                }
            });
        });

        // Send individual reminder
        $('.send-reminder').click(function() {
            var bookingId = $(this).data('booking-id');

            $.ajax({
                url: apiUrl + 'SendReminders',
                type: 'POST',
                data: {
                    scheduleId: @schedule.ID,
                    hoursBeforeCourse: 24
                },
                beforeSend: function(xhr) {
                    xhr.setRequestHeader("ModuleId", @Dnn.ModuleContext.ModuleId);
                    xhr.setRequestHeader("TabId", @Dnn.Tab.TabID);
                    xhr.setRequestHeader('RequestVerificationToken', sf.getAntiForgeryValue());
                },
                success: function(result) {
                    alert('Emlékeztető sikeresen elküldve!');
                },
                error: function(xhr, status, error) {
                    alert('Hiba történt az emlékeztető küldése során: ' + xhr.responseText);
                }
            });
        });

        // Send reminders to all participants
        $('#sendReminders').click(function() {
            if (!confirm('Biztosan küld emlékeztetőt minden résztvevőnek?')) {
                return;
            }

            $.ajax({
                url: apiUrl + 'SendReminders',
                type: 'POST',
                data: {
                    scheduleId: @schedule.ID,
                    hoursBeforeCourse: 24
                },
                beforeSend: function(xhr) {
                    xhr.setRequestHeader("ModuleId", @Dnn.ModuleContext.ModuleId);
                    xhr.setRequestHeader("TabId", @Dnn.Tab.TabID);
                    xhr.setRequestHeader('RequestVerificationToken', sf.getAntiForgeryValue());
                },
                success: function(result) {
                    alert('Emlékeztetők sikeresen elküldve: ' + result.Message);
                },
                error: function(xhr, status, error) {
                    alert('Hiba történt az emlékeztetők küldése során: ' + xhr.responseText);
                }
            });
        });
    });
</script>